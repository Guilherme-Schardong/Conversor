/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.conversor;

/**
 *
 * @author Aluno
 */
public class Conversor extends javax.swing.JFrame {

    /**
     * Creates new form Conversor
     */
    public Conversor() {
        initComponents();
    }
      Double valor1, valor2;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSaida = new javax.swing.JTextField();
        txtEntrada = new javax.swing.JTextField();
        unidMed1 = new javax.swing.JComboBox<>();
        unidMed2 = new javax.swing.JComboBox<>();
        buttonConverter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSaidaActionPerformed(evt);
            }
        });

        txtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntradaActionPerformed(evt);
            }
        });

        unidMed1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quilômetro (km)", "Metro (m)", "Decímetro (dm)", "Centímetro (cm)", "Milímetro (mm)", "Selecione" }));
        unidMed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unidMed1ActionPerformed(evt);
            }
        });

        unidMed2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quilômetro (km)", "Metro (m)", "Decímetro (dm)", "Centímetro (cm)", "Milímetro (mm)", "Selecione" }));
        unidMed2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unidMed2ActionPerformed(evt);
            }
        });

        buttonConverter.setText("Converter");
        buttonConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConverterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setText("Conversor");

        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(buttonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(buttonConverter, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSaida)
                            .addComponent(txtEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(unidMed1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(unidMed2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unidMed1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonConverter, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unidMed2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void unidMed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unidMed1ActionPerformed
        // TODO add your handling code here:
        unidMed1.getSelectedItem();
    }//GEN-LAST:event_unidMed1ActionPerformed

    private void buttonConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConverterActionPerformed
        // TODO add your handling code here:
        valor1 = Double.parseDouble(txtEntrada.getText());
        if(unidMed1 .getSelectedItem().equals("Quilômetro (km)") && unidMed2.getSelectedItem().equals("Quilômetro (km)")){
        txtSaida.setText(String.valueOf(valor1 + " Km"));
        }
        else if(unidMed1 .getSelectedItem().equals("Quilômetro (km)") && unidMed2.getSelectedItem().equals("Metro (m)")){
            txtSaida.setText(String.valueOf(valor1*1000 + " m"));
        }
        else if(unidMed1 .getSelectedItem().equals("Quilômetro (km)") && unidMed2.getSelectedItem().equals("Decímetro (dm)")){
            txtSaida.setText(String.valueOf(valor1*10000 + " dm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Quilômetro (km)") && unidMed2.getSelectedItem().equals("Centímetro (cm")){
            txtSaida.setText(String.valueOf(valor1*100000 + " cm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Quilômetro (km)") && unidMed2.getSelectedItem().equals("Milímetro (mm)")){
            txtSaida.setText(String.valueOf(valor1*1000000 + " mm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Metro (m)") && unidMed2.getSelectedItem().equals("Quilômetro (km)")){
        txtSaida.setText(String.valueOf(valor1/1000 + " Km"));
        }
        else if(unidMed1 .getSelectedItem().equals("Metro (m)") && unidMed2.getSelectedItem().equals("Metro (m)")){
            txtSaida.setText(String.valueOf(valor1 + " m"));
        }
        else if(unidMed1 .getSelectedItem().equals("Metro (m)") && unidMed2.getSelectedItem().equals("Decímetro (dm)")){
            txtSaida.setText(String.valueOf(valor1*10 + " dm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Metro (m)") && unidMed2.getSelectedItem().equals("Centímetro (cm")){
            txtSaida.setText(String.valueOf(valor1*100 + " cm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Metro (m)") && unidMed2.getSelectedItem().equals("Milímetro (mm)")){
            txtSaida.setText(String.valueOf(valor1*1000 + " mm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Decímetro (dm)") && unidMed2.getSelectedItem().equals("Quilômetro (km)")){
        txtSaida.setText(String.valueOf(valor1/10000 + " Km"));
        }
        else if(unidMed1 .getSelectedItem().equals("Decímetro (dm)") && unidMed2.getSelectedItem().equals("Metro (m)")){
            txtSaida.setText(String.valueOf(valor1/10 + " m"));
        }
        else if(unidMed1 .getSelectedItem().equals("Decímetro (dm)") && unidMed2.getSelectedItem().equals("Decímetro (dm)")){
            txtSaida.setText(String.valueOf(valor1 + " dm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Decímetro (dm)") && unidMed2.getSelectedItem().equals("Centímetro (cm")){
            txtSaida.setText(String.valueOf(valor1*10 + " cm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Decímetro (dm)") && unidMed2.getSelectedItem().equals("Milímetro (mm)")){
            txtSaida.setText(String.valueOf(valor1*100 + " mm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Centímetro (cm)") && unidMed2.getSelectedItem().equals("Quilômetro (km)")){
        txtSaida.setText(String.valueOf(valor1/100000 + " Km"));
        }
        else if(unidMed1 .getSelectedItem().equals("Centímetro (cm)") && unidMed2.getSelectedItem().equals("Metro (m)")){
            txtSaida.setText(String.valueOf(valor1/100 + " m"));
        }
        else if(unidMed1 .getSelectedItem().equals("Centímetro (cm)") && unidMed2.getSelectedItem().equals("Decímetro (dm)")){
            txtSaida.setText(String.valueOf(valor1/10 + " dm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Centímetro (cm)") && unidMed2.getSelectedItem().equals("Centímetro (cm)")){
            txtSaida.setText(String.valueOf(valor1 + " cm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Centímetro (cm)") && unidMed2.getSelectedItem().equals("Milímetro (mm)")){
            txtSaida.setText(String.valueOf(valor1*10 + " mm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Milímetro (mm)") && unidMed2.getSelectedItem().equals("Quilômetro (km)")){
        txtSaida.setText(String.valueOf(valor1/1000000 + " Km"));
        }
        else if(unidMed1 .getSelectedItem().equals("Milímetro (mm)") && unidMed2.getSelectedItem().equals("Metro (m)")){
            txtSaida.setText(String.valueOf(valor1/1000 + " m"));
        }
        else if(unidMed1 .getSelectedItem().equals("Milímetro (mm)") && unidMed2.getSelectedItem().equals("Decímetro (dm)")){
            txtSaida.setText(String.valueOf(valor1/100 + " dm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Milímetro (mm)") && unidMed2.getSelectedItem().equals("Centímetro (cm)")){
            txtSaida.setText(String.valueOf(valor1/10 + " cm"));
        }
        else if(unidMed1 .getSelectedItem().equals("Milímetro (mm)") && unidMed2.getSelectedItem().equals("Milímetro (mm)")){
            txtSaida.setText(String.valueOf(valor1 + " mm"));
        }
    }//GEN-LAST:event_buttonConverterActionPerformed

    private void unidMed2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unidMed2ActionPerformed
        // TODO add your handling code here:
        unidMed2.getSelectedItem();
    }//GEN-LAST:event_unidMed2ActionPerformed

    private void txtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntradaActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtEntradaActionPerformed

    private void txtSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSaidaActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSaidaActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        // TODO add your handling code here:
        txtEntrada.setText("");
        txtSaida.setText("");
        unidMed1.setSelectedItem("Selecione");
        unidMed2.setSelectedItem("Selecione");
        
        
    }//GEN-LAST:event_buttonResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Conversor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConverter;
    private javax.swing.JButton buttonReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextField txtSaida;
    private javax.swing.JComboBox<String> unidMed1;
    private javax.swing.JComboBox<String> unidMed2;
    // End of variables declaration//GEN-END:variables
}
